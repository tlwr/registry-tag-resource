#!/usr/bin/env ruby

require 'json'

require 'http'
require 'link_header'
require 'semantic'

SEMVER_RE = %r{^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$}


inp = JSON.parse(STDIN.read)

source = inp['source'] || {}
current_version = inp['version'] || {}

uri = source['uri']
raise 'mandatory source.uri not found' if uri.nil?

pages = source.fetch('pages', '1').to_i
raise "source.pages must be a positive integer" unless pages >= 1

tags_per_page = source.fetch('tags_per_page', '10').to_i
raise "source.tags_per_page must be a positive integer" unless tags_per_page >= 1

arch = source.fetch('arch', 'amd64')
os = source.fetch('os', 'linux')

semver_matcher = source.dig('semver', 'matcher')
semver_prefix = source.dig('semver', 'prefix') || ''

regexp = source.dig('regexp')

tags = []

tags_url = "#{uri}/tags"
tags_url += '/list' unless uri.include?('hub.docker.com')

tags_url += "?page_size=#{tags_per_page}" if uri.include?('hub.docker.com')
tags_url += "?n=#{tags_per_page}" unless uri.include?('hub.docker.com')

pages.times do
  break if tags_url.nil?

  resp = HTTP.get(tags_url)
  unless resp.code == 200
    abort "expected 200 but received #{resp.code} from #{tags_url}"
  end

  tags_resp = JSON.parse(resp.body)
  if tags_resp['next']
    tags_url = tags_resp['next']
  elsif resp['link']
    links = LinkHeader.parse(resp['link'])
    next_href = links.find_link(['rel', 'next'])&.href
    unless next_href.nil?
      tags_url = tags_url.sub(%r{/v2/.*$}, next_href)
    end
  end

  if tags_resp.key? 'results'
    tags += tags_resp.fetch('results', []).map { |ft| ft['name'] }
  elsif tags_resp.key? 'tags'
    tags += tags_resp.fetch('tags', [])
  end
end


# remove duplicate tags in case there is a push while paginating
tags = tags.uniq

# if using semver only make tags available if the tag satisfies semver matcher
if semver_matcher
  tags = tags.select { |t| t.match?(SEMVER_RE) }

  tags = tags.select do |t|
    v = Semantic::Version.new(t.sub(/semver_prefix/, ''))
    v.satisfies? semver_matcher
  end
end

# if using regexp select matching tags only
# this can be combined with semver to discard pre-releases etc
tags = tags.select { |t| t.match?(/#{regexp}/) } if regexp

if semver_matcher
  tags = tags.sort_by { |t| Gem::Version.new(t.sub(/semver_prefix/, '')) }
else
  # order most recent last
  tags = tags.reverse
end

# discard versions that were created before the current version
if current_version.key? 'tag'
  tags = tags.drop_while { |t| t != current_version['tag'] }
end

all_versions = tags.map { |t| { tag: t } }
puts all_versions.to_json
